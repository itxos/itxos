version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: threat-intel-db
    environment:
      POSTGRES_DB: ${DB_NAME:-threat_intel}
      POSTGRES_USER: ${DB_USERNAME:-threat_intel_app}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./init-scripts:/docker-entrypoint-initdb.d/scripts:ro
    ports:
      - "5432:5432"
    networks:
      - threat-intel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-threat_intel_app} -d ${DB_NAME:-threat_intel}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n Workflow Engine
  n8n:
    image: n8nio/n8n:latest
    container_name: threat-intel-n8n
    environment:
      # Database Configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${DB_NAME:-threat_intel}
      - DB_POSTGRESDB_USER=${DB_USERNAME:-threat_intel_app}
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD}
      
      # n8n Configuration
      - N8N_HOST=${N8N_HOST:-0.0.0.0}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
      
      # Authentication
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      
      # Security
      - N8N_JWT_AUTH_HEADER_NAME=${N8N_JWT_AUTH_HEADER_NAME:-authorization}
      - N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN=${N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN:-true}
      
      # Execution
      - EXECUTIONS_PROCESS=${EXECUTIONS_PROCESS:-main}
      - EXECUTIONS_DATA_SAVE_ON_ERROR=${N8N_SAVE_DATA_ON_ERROR:-all}
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=${N8N_SAVE_DATA_ON_SUCCESS:-all}
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=${N8N_SAVE_MANUAL_EXECUTIONS:-true}
      
      # Logging
      - N8N_LOG_LEVEL=${LOG_LEVEL:-info}
      - N8N_LOG_OUTPUT=${LOG_OUTPUT:-console}
      
      # External API Keys (passed from environment)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      
      # Email Configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - IMAP_HOST=${IMAP_HOST}
      - IMAP_PORT=${IMAP_PORT}
      - IMAP_USER=${IMAP_USER}
      - IMAP_PASSWORD=${IMAP_PASSWORD}
      
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflow.json:/tmp/workflow.json:ro
    networks:
      - threat-intel-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: threat-intel-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      
      # Database connection for Grafana
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=${DB_NAME:-threat_intel}
      - GF_DATABASE_USER=${DB_USERNAME:-threat_intel_app}
      - GF_DATABASE_PASSWORD=${DB_PASSWORD}
      
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
    networks:
      - threat-intel-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching (optional)
  redis:
    image: redis:7-alpine
    container_name: threat-intel-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - threat-intel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: threat-intel-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - threat-intel-network
    depends_on:
      - n8n
      - grafana
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: threat-intel-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - threat-intel-network
    restart: unless-stopped
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  n8n_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

# Networks
networks:
  threat-intel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16